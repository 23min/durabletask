// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Immutable;
using System.Runtime.Serialization;
using DurableTask.History;
using ImmutableObjectGraph.Generation;

namespace DurableTask.ServiceFabric
{
    partial class PersistentSession
    {
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private static readonly PersistentSession DefaultInstance = GetDefaultTemplate();
        private static int lastIdentityProduced;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private readonly uint identity;
        [System.ObsoleteAttribute("This constructor for use with deserializers only. Use the static Create factory method instead.")]
        public PersistentSession(System.String SessionId, System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent> SessionState, System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> Messages, System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> ScheduledMessages, System.Boolean IsLocked) : this(NewIdentity(), sessionId: SessionId, sessionState: SessionState, messages: Messages, scheduledMessages: ScheduledMessages, isLocked: IsLocked, skipValidation: false)
        {
        }

        PersistentSession(uint identity, System.String sessionId, System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent> sessionState, System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> messages, System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> scheduledMessages, System.Boolean isLocked, bool skipValidation)
        {
            this.identity = identity;
            this.sessionId = sessionId;
            this.sessionState = sessionState;
            this.messages = messages;
            this.scheduledMessages = scheduledMessages;
            this.isLocked = isLocked;
            if (!skipValidation)
            {
                this.Validate();
            }
        }

        public bool IsLocked => this.isLocked;
        public ImmutableList<ReceivableTaskMessage> Messages => this.messages;
        public ImmutableList<ReceivableTaskMessage> ScheduledMessages => this.scheduledMessages;
        public string SessionId => this.sessionId;
        public ImmutableList<HistoryEvent> SessionState => this.sessionState;
        internal uint Identity => this.identity;
        public static PersistentSession Create(ImmutableObjectGraph.Optional<System.String> sessionId = default(ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent>> sessionState = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent>>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>> messages = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>> scheduledMessages = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>>), ImmutableObjectGraph.Optional<System.Boolean> isLocked = default(ImmutableObjectGraph.Optional<System.Boolean>))
        {
            var identity = ImmutableObjectGraph.Optional.For(NewIdentity());
            return DefaultInstance.WithFactory(sessionId: ImmutableObjectGraph.Optional.For(sessionId.GetValueOrDefault(DefaultInstance.SessionId)), sessionState: ImmutableObjectGraph.Optional.For(sessionState.GetValueOrDefault(DefaultInstance.SessionState)), messages: ImmutableObjectGraph.Optional.For(messages.GetValueOrDefault(DefaultInstance.Messages)), scheduledMessages: ImmutableObjectGraph.Optional.For(scheduledMessages.GetValueOrDefault(DefaultInstance.ScheduledMessages)), isLocked: ImmutableObjectGraph.Optional.For(isLocked.GetValueOrDefault(DefaultInstance.IsLocked)), identity: identity);
        }

        public static Builder CreateBuilder() => new Builder(DefaultInstance);
        public Builder ToBuilder() => new Builder(this);
        public PersistentSession With(ImmutableObjectGraph.Optional<System.String> sessionId = default(ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent>> sessionState = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent>>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>> messages = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>> scheduledMessages = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>>), ImmutableObjectGraph.Optional<System.Boolean> isLocked = default(ImmutableObjectGraph.Optional<System.Boolean>))
        {
            return (PersistentSession)this.WithCore(sessionId: sessionId, sessionState: sessionState, messages: messages, scheduledMessages: scheduledMessages, isLocked: isLocked);
        }

        static partial void CreateDefaultTemplate(ref Template template);
        private static PersistentSession GetDefaultTemplate()
        {
            var template = new Template();
            CreateDefaultTemplate(ref template);
            return new PersistentSession(default(uint), template.SessionId, template.SessionState, template.Messages, template.ScheduledMessages, template.IsLocked, skipValidation: true);
        }

        static uint NewIdentity()
        {
            return (uint)System.Threading.Interlocked.Increment(ref lastIdentityProduced);
        }

        partial void Validate();
        PersistentSession WithCore(ImmutableObjectGraph.Optional<System.String> sessionId = default(ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent>> sessionState = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent>>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>> messages = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>> scheduledMessages = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>>), ImmutableObjectGraph.Optional<System.Boolean> isLocked = default(ImmutableObjectGraph.Optional<System.Boolean>))
        {
            return this.WithFactory(sessionId: sessionId, sessionState: sessionState, messages: messages, scheduledMessages: scheduledMessages, isLocked: isLocked, identity: ImmutableObjectGraph.Optional.For(this.Identity));
        }

        private PersistentSession WithFactory(ImmutableObjectGraph.Optional<System.String> sessionId = default(ImmutableObjectGraph.Optional<System.String>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent>> sessionState = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent>>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>> messages = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>>), ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>> scheduledMessages = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage>>), ImmutableObjectGraph.Optional<System.Boolean> isLocked = default(ImmutableObjectGraph.Optional<System.Boolean>), ImmutableObjectGraph.Optional<uint> identity = default(ImmutableObjectGraph.Optional<uint>))
        {
            if ((identity.IsDefined && identity.Value != this.Identity) || (sessionId.IsDefined && sessionId.Value != this.SessionId) || (sessionState.IsDefined && sessionState.Value != this.SessionState) || (messages.IsDefined && messages.Value != this.Messages) || (scheduledMessages.IsDefined && scheduledMessages.Value != this.ScheduledMessages) || (isLocked.IsDefined && isLocked.Value != this.IsLocked))
            {
                return new PersistentSession(identity: identity.GetValueOrDefault(this.Identity), sessionId: sessionId.GetValueOrDefault(this.SessionId), sessionState: sessionState.GetValueOrDefault(this.SessionState), messages: messages.GetValueOrDefault(this.Messages), scheduledMessages: scheduledMessages.GetValueOrDefault(this.ScheduledMessages), isLocked: isLocked.GetValueOrDefault(this.IsLocked), skipValidation: false);
            }
            else
            {
                return this;
            }
        }

        public partial class Builder : System.ComponentModel.INotifyPropertyChanged
        {
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
            protected System.Boolean isLocked;
            [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
            protected System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> messages;
            [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
            protected System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> scheduledMessages;
            [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
            protected System.String sessionId;
            [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
            protected System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent> sessionState;
            [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
            private PersistentSession immutable;
            internal Builder(PersistentSession immutable)
            {
                this.immutable = immutable;
                this.sessionId = immutable.sessionId;
                this.sessionState = immutable.sessionState;
                this.messages = immutable.messages;
                this.scheduledMessages = immutable.scheduledMessages;
                this.isLocked = immutable.isLocked;
            }

            public System.Boolean IsLocked
            {
                get
                {
                    return this.isLocked;
                }

                set
                {
                    if (this.isLocked != value)
                    {
                        this.isLocked = value;
                        this.OnPropertyChanged();
                    }
                }
            }

            public System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> Messages
            {
                get
                {
                    return this.messages;
                }

                set
                {
                    if (this.messages != value)
                    {
                        this.messages = value;
                        this.OnPropertyChanged();
                    }
                }
            }

            public System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> ScheduledMessages
            {
                get
                {
                    return this.scheduledMessages;
                }

                set
                {
                    if (this.scheduledMessages != value)
                    {
                        this.scheduledMessages = value;
                        this.OnPropertyChanged();
                    }
                }
            }

            public System.String SessionId
            {
                get
                {
                    return this.sessionId;
                }

                set
                {
                    if (this.sessionId != value)
                    {
                        this.sessionId = value;
                        this.OnPropertyChanged();
                    }
                }
            }

            public System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent> SessionState
            {
                get
                {
                    return this.sessionState;
                }

                set
                {
                    if (this.sessionState != value)
                    {
                        this.sessionState = value;
                        this.OnPropertyChanged();
                    }
                }
            }

            public PersistentSession ToImmutable()
            {
                return this.immutable = this.immutable.With(ImmutableObjectGraph.Optional.For(this.SessionId), ImmutableObjectGraph.Optional.For(this.SessionState), ImmutableObjectGraph.Optional.For(this.Messages), ImmutableObjectGraph.Optional.For(this.ScheduledMessages), ImmutableObjectGraph.Optional.For(this.IsLocked));
            }

            protected virtual void OnPropertyChanged([System.Runtime.CompilerServices.CallerMemberNameAttribute] string propertyName = "")
            {
                this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

#pragma warning disable 649 // field initialization is optional in user code

        private struct Template
        {
            internal System.Boolean IsLocked;
            internal System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> Messages;
            internal System.Collections.Immutable.ImmutableList<DurableTask.ServiceFabric.ReceivableTaskMessage> ScheduledMessages;
            internal System.String SessionId;
            internal System.Collections.Immutable.ImmutableList<DurableTask.History.HistoryEvent> SessionState;
        }
#pragma warning restore 649
    }
}

namespace DurableTask.ServiceFabric
{
    partial class ReceivableTaskMessage
    {
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private static readonly ReceivableTaskMessage DefaultInstance = GetDefaultTemplate();
        private static int lastIdentityProduced;
        [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
        private readonly uint identity;
        [System.ObsoleteAttribute("This constructor for use with deserializers only. Use the static Create factory method instead.")]
        public ReceivableTaskMessage(DurableTask.TaskMessage TaskMessage, System.Boolean IsReceived) : this(NewIdentity(), taskMessage: TaskMessage, isReceived: IsReceived, skipValidation: false)
        {
        }

        ReceivableTaskMessage(uint identity, DurableTask.TaskMessage taskMessage, System.Boolean isReceived, bool skipValidation)
        {
            this.identity = identity;
            this.taskMessage = taskMessage;
            this.isReceived = isReceived;
            if (!skipValidation)
            {
                this.Validate();
            }
        }

        public bool IsReceived => this.isReceived;
        public TaskMessage TaskMessage => this.taskMessage;
        internal uint Identity => this.identity;
        public static ReceivableTaskMessage Create(ImmutableObjectGraph.Optional<DurableTask.TaskMessage> taskMessage = default(ImmutableObjectGraph.Optional<DurableTask.TaskMessage>), ImmutableObjectGraph.Optional<System.Boolean> isReceived = default(ImmutableObjectGraph.Optional<System.Boolean>))
        {
            var identity = ImmutableObjectGraph.Optional.For(NewIdentity());
            return DefaultInstance.WithFactory(taskMessage: ImmutableObjectGraph.Optional.For(taskMessage.GetValueOrDefault(DefaultInstance.TaskMessage)), isReceived: ImmutableObjectGraph.Optional.For(isReceived.GetValueOrDefault(DefaultInstance.IsReceived)), identity: identity);
        }

        public static Builder CreateBuilder() => new Builder(DefaultInstance);
        public Builder ToBuilder() => new Builder(this);
        public ReceivableTaskMessage With(ImmutableObjectGraph.Optional<DurableTask.TaskMessage> taskMessage = default(ImmutableObjectGraph.Optional<DurableTask.TaskMessage>), ImmutableObjectGraph.Optional<System.Boolean> isReceived = default(ImmutableObjectGraph.Optional<System.Boolean>))
        {
            return (ReceivableTaskMessage)this.WithCore(taskMessage: taskMessage, isReceived: isReceived);
        }

        static partial void CreateDefaultTemplate(ref Template template);
        private static ReceivableTaskMessage GetDefaultTemplate()
        {
            var template = new Template();
            CreateDefaultTemplate(ref template);
            return new ReceivableTaskMessage(default(uint), template.TaskMessage, template.IsReceived, skipValidation: true);
        }

        static uint NewIdentity()
        {
            return (uint)System.Threading.Interlocked.Increment(ref lastIdentityProduced);
        }

        partial void Validate();
        ReceivableTaskMessage WithCore(ImmutableObjectGraph.Optional<DurableTask.TaskMessage> taskMessage = default(ImmutableObjectGraph.Optional<DurableTask.TaskMessage>), ImmutableObjectGraph.Optional<System.Boolean> isReceived = default(ImmutableObjectGraph.Optional<System.Boolean>))
        {
            return this.WithFactory(taskMessage: taskMessage, isReceived: isReceived, identity: ImmutableObjectGraph.Optional.For(this.Identity));
        }

        private ReceivableTaskMessage WithFactory(ImmutableObjectGraph.Optional<DurableTask.TaskMessage> taskMessage = default(ImmutableObjectGraph.Optional<DurableTask.TaskMessage>), ImmutableObjectGraph.Optional<System.Boolean> isReceived = default(ImmutableObjectGraph.Optional<System.Boolean>), ImmutableObjectGraph.Optional<uint> identity = default(ImmutableObjectGraph.Optional<uint>))
        {
            if ((identity.IsDefined && identity.Value != this.Identity) || (taskMessage.IsDefined && taskMessage.Value != this.TaskMessage) || (isReceived.IsDefined && isReceived.Value != this.IsReceived))
            {
                return new ReceivableTaskMessage(identity: identity.GetValueOrDefault(this.Identity), taskMessage: taskMessage.GetValueOrDefault(this.TaskMessage), isReceived: isReceived.GetValueOrDefault(this.IsReceived), skipValidation: false);
            }
            else
            {
                return this;
            }
        }

        public partial class Builder : System.ComponentModel.INotifyPropertyChanged
        {
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
            protected System.Boolean isReceived;
            [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
            protected DurableTask.TaskMessage taskMessage;
            [System.Diagnostics.DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState.Never)]
            private ReceivableTaskMessage immutable;
            internal Builder(ReceivableTaskMessage immutable)
            {
                this.immutable = immutable;
                this.taskMessage = immutable.taskMessage;
                this.isReceived = immutable.isReceived;
            }

            public System.Boolean IsReceived
            {
                get
                {
                    return this.isReceived;
                }

                set
                {
                    if (this.isReceived != value)
                    {
                        this.isReceived = value;
                        this.OnPropertyChanged();
                    }
                }
            }

            public DurableTask.TaskMessage TaskMessage
            {
                get
                {
                    return this.taskMessage;
                }

                set
                {
                    if (this.taskMessage != value)
                    {
                        this.taskMessage = value;
                        this.OnPropertyChanged();
                    }
                }
            }

            public ReceivableTaskMessage ToImmutable()
            {
                return this.immutable = this.immutable.With(ImmutableObjectGraph.Optional.For(this.TaskMessage), ImmutableObjectGraph.Optional.For(this.IsReceived));
            }

            protected virtual void OnPropertyChanged([System.Runtime.CompilerServices.CallerMemberNameAttribute] string propertyName = "")
            {
                this.PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

#pragma warning disable 649 // field initialization is optional in user code

        private struct Template
        {
            internal System.Boolean IsReceived;
            internal DurableTask.TaskMessage TaskMessage;
        }
#pragma warning restore 649
    }
}